* Template Pattern
** Defines the steps of an algorithm and allows subclass to provide
** the implementation for one or more steps

* Good for using between classes which have duplicated code

* It protects the algorithm and makes it live in one place

* Easy to plug in new classes which use the same algorithm

* This is an example of IoC (Inversion of Control)

* Formal Definition
** The Template Method Pattern defines a skeleton of an algorithm in a method,
** deffering some steps to subclasses. Template Method lets subclasses redefine
** certain steps of an algorithm without changing the algorithm's structure

* Hooks
** A hook is a method that is declared in the abstract class given a default 
** operation. Subclasses can redefine as needed

* The Hollywood Principle
** "Don't call up, we'll call you"
** This helps prevent "dependency rot"
*** High-level components depends on sideways components depending on low level 
*** components
*** Makes it hard to understand a system
** So with this we allow low-level components to hook themselves in 
** But the high-level components determine when they are needed, and how
