* The Command Pattern
** Encapsulation of method invocation
** A remote control is good analogy or a macro
*** Hit a button and a thing programmed task happens
** You could have a bunch of completely different tasks to do and slot them into a single object
** Remember the Diner...
*** Customer gives order
*** Waitress takes order
*** Waitress gives order to cook
*** Cook fulfills the order

* Diner Broken down
** Customer => createOrder()
** Waitress => takeOrder()
** Waitress => orderUp()
** Cook => output
** CHUNKS of work
*** Order Slip is an object that acts as a request to prepare a meal
**** An order slip encapsulates a request to prepare a meal
*** The Waitress's job is to take Order Slips and invoke orderUp() on them
*** The Cook then has the knowledge required to prepare the meal
    
* Command Pattern Generalized
** Client => createCommandObject()
** Invoker => setCommand()
** Invoker => execute()
** Reciever => Output

* The Command Pattern Defined
** The Command patter encapulates a request as an object, thereby letting you 
** parameterize other objects with different reqeust, queue or log requests,
** and support undoable operations.
