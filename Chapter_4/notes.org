* The Factory Pattern
** "new" = "concrete
*** new is instantiating a concrete class which is an implementation
*** So when have to make a bunch of related concrete classes you get a if else if block
*** Obviously new is required so we are just going to look at places where
**** *identify the aspects that vary and separate them from what stays the same.*
*** So you take that chunk of if statements and throw it into a class
*** ^^^ is a factory object :)
    
* Another perspective: parallel class hierarchies
** The Product Class
*** This will be the actual thing that is made by the factory
*** Pizza -> NYStyleCheesePizza etc
*** The concrete objects are created from the concrete implementation of the Creator Class
** The Creator Class
*** This is what makes the things
*** PizzaStore -> NYPizzaStore etc.
*** This will create the specific concrete products
    
* Factory Method Pattern defined
** The Factory Method Pattern defines an interface for creating and object
** but lets sublcasses decide which class to instantiate.
** Factory Method lets a class defer instantiation to subclasses
** This gives us a way to encapsulate the instantiations of concrete types
** The pattern allows subclasses to decide at runtime i.e. which subclass is chosen
   
* The Dependency Inversion Principle
** Depend upon abstractions. Do not depend upon concrete classes.
** High-level components should not depend on low level components
** BOTH high and low should depend on abstractions
*** High -> Class with behavior defined in terms of other, "low" level components
*** PizzaStore is high level because behavior is defined in terms of pizzas
**** it does the things to the Pizzas
*** Pizzas are low level components
** Applying this to the pizza store
*** Now both PizzaStore will be dependent on Pizza and Concrete Pizza classes 
*** will also be dependent on Pizza
** A few guidelines
*** No variable should hold a reference to a concrete class
*** No class should derive from a concrete class
*** No method should override an implemented method of any of its base classes
   
* Regions
** What if you have different factories for each ingredient
** Then we need seperate factories which make thier own stuff
** So this means families of objects

* Abstract Factory Pattern defined 
** The Abstract Facotry Patter provides an interface for creating families of
** related or dependent objects without specifing their concrete class
** 
* Abstract Factory vs Factory
** FACTORY
*** PizzaStore 
**** NYPizzaStore
**** ChicagoPizzaStore
*** Pizza
**** NYStyleCheesePizza
**** ChicagoStyleClamPizza
**** etc.
*** So each concrete PizzaStore has a subset of concrete pizzas it will create
*** createPizza has a return type of pizza and it can return any of the concrete
*** implementations of the Pizza class
** ABSTRACT FACTORY
*** PizzaIngredientFactory
**** NYPizzaIngredientFactory
**** ChicagoPizzaIngredientFactory
*** Dough
**** Thin
**** Thick
*** Sauce
**** Marinara
**** Plum
*** ETC
*** There are concrete ingredient factories which have many different interfaces which it can create
*** This will work together with a 'normal' factory to provide the ingredients for the pizzas!
* Tools for your Design ToolBox
** Encapsulate what varies
** Favor composition over inheritance
** Program to interfaces, not implementations
** Strive for lossely coupled designs between objects that interact
** Classes should be open for extension but closed for modification
** Depend on abstractions. Do not depend on concrete classes


