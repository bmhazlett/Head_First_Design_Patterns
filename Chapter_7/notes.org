* Adapters
** Contect two interfaces together
** Client -> request() -> Adapter -> translatedRequest() -> Adaptee
*** Client makes a request to the adapter by calling a method on it using target interface
*** Adapter translate the request into one or more calls on the adaptee
*** Client receives the results of the call 

* Adapter Pattern
** The Adapter Pattern converts the interface of a class into another
** interface the clients expect. Adapter lets classes work together
** that couldn't otherwise because of incompatible interfaces
** Decouples the client from the implemented interface

* Facade Pattern
** The Facade Pattern provides a unified interface to a set of interfaces in
** a subsystem. Facade defines a higher-level interface that makes the
** subsystem easier to use. 
** Give a client an easy way to access without losing low level access

* The Principle of Least Knowledge
** Talk only to your immediate friends
** Classes should only talk to other classes they are close to 
** Minimize dependencies  
** Rules
*** Only talk to yourself
*** Only talk to objects passed in as a parameter to a method
*** Only talk to any object the method creates or instansiates
*** Only tlak to any components of the object

